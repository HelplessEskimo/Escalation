strategy_military = {}

-- how long should the tasks be idle before being deleted?
s_defendTaskTimeoutAtRally 	= 3*60*10
s_defendTaskTimeoutAtTarget	= 2*60*10
s_attackTaskTimeoutAtRally 	= 3*60*10
s_attackTaskTimeoutAtTarget	= 30*10

strategy_military.init = function()

end

--------------------------------------------------------------------------------
--
	
strategy_military.calculate_military_priorities = function()

	if s_components[COMPONENT_Defending] == true then
		RankDefendTargets()
	else
		Military_ClearTargets(s_selfplayer, MTARGET_Defend)
	end
	
	if s_components[COMPONENT_Attacking] == true then
		RankAttackTargets()
	else
		Military_ClearTargets(s_selfplayer, MTARGET_Attack)
	end
	
	-- after ranking, suggest potential targets for combat squads
	Military_SuggestSquadTargets(s_selfplayer)

	-- if economy healthy, and near pop-cap, get aggressive (allow units to die)
	if (cache.current_population_personnel > (cache.max_population_personnel * 0.9) and
			cache.resources.requisition > 900 - cache.resources_rate.requisition and
			cache.resources.power > 400 - cache.resources_rate.power) then

		Military_SetSquadAggression(s_selfplayer, 1.0)
	else
		Military_SetSquadAggression(s_selfplayer, 0.5)
	end
end

--------------------------------------------------------------------------------
--
	
strategy_military.execute = function()

	aipushtrace("MilitaryStrategy")
	
	aitrace("Desired Attack Percentage "..state_analysis.military_attackPercentage)
	
	--------------------------------------------------------------------------------
	-- create sniper tasks
	if s_components[COMPONENT_Attacking] == true then
		
		-- want an empty sniper task at all times
		local numSniperTasks = Task_CountEmpty(s_selfplayer, TASK_Sniper, AI_Squad)
		if numSniperTasks <= 0 then
			
			-- choose a random sniper style
			-- defend 60% of the time
			local rand = AI_RandMax(10)
			
			if rand < 6 then
				Request_Sniper(s_selfplayer, TGROUP_SpecialUnit, TPRIORITY_SpecialUnit, SNIPER_Defend) 
			elseif rand >= 6 and rand < 10 then
				Request_Sniper(s_selfplayer, TGROUP_SpecialUnit, TPRIORITY_SpecialUnit, SNIPER_Attack)
			else
				aitrace("Error - Invalid Sniper Style!")
			end
		end
		
		-- want an empty sniper task at all times
		local numImmobileTasks = Task_CountEmpty(s_selfplayer, TASK_ImmobileCombat, AI_Squad)
		if numImmobileTasks <= 0 then
			
			Request_ImmobileCombat(s_selfplayer, TGROUP_SpecialUnit, TPRIORITY_SpecialUnit)
			
		end
	else
		aitrace("COMPONENT_Attacking turned off - no new sniper tasks.")	
	end
	
	--------------------------------------------------------------------------------
	-- create combat tasks

	-- count total number of combat tasks
	local numAttackTasks  = Task_CountCombat(s_selfplayer, COMBAT_Attack)
	local numDefendTasks  = Task_CountCombat(s_selfplayer, COMBAT_Defend)
	local numDefaultTasks = Task_CountCombat(s_selfplayer, COMBAT_Default)
	
	local numCombatTasks = numAttackTasks + numDefendTasks
	aitrace("CombatTasks: "..numCombatTasks)
	
	-- how many units can do combat
	-- note: we assume combat only uses one squad per task
	local numCombatTasksDesired = AIResource_GetNumCombatants(s_selfplayer) - numDefaultTasks
	if numCombatTasksDesired < 0 then
		numCombatTasksDesired = 0
	end
	aitrace("Combat Squads:"..numCombatTasksDesired)
	
	-- figure out number of attack and defend tasks desired
	local numAttackTasksDesired = math.ceil(state_analysis.military_attackPercentage*numCombatTasksDesired)
	local numDefendTasksDesired = numCombatTasksDesired - numAttackTasksDesired
	
	-- cap min
	local numAttackTasksMin = AIResource_GetNumCombatantsWhoCanOnlyAttack(s_selfplayer)
	local numDefendTasksMin = AIResource_GetNumCombatantsWhoCanOnlyDefend(s_selfplayer)
	if numAttackTasksDesired < numAttackTasksMin then
		numAttackTasksDesired = numAttackTasksMin
	end
	if numDefendTasksDesired < numDefendTasksMin then
		numDefendTasksDesired = numDefendTasksMin
	end
	
	-- cap max.. do this after cap min so that if there are no targets we definitely don't create tasks
	if Military_GetTargetCount(s_selfplayer, MTARGET_Attack) <= 0 then
		aitrace("No Attack Targets")
		numAttackTasksDesired = 0
	end
	if Military_GetTargetCount(s_selfplayer, MTARGET_Defend) <= 0 then
		aitrace("No Defend Targets")
		numDefendTasksDesired = 0
	end
	
	-- clear unwanted attack tasks each frame
	if numAttackTasks > numAttackTasksDesired then
		aitrace("Killing inactive attack tasks")
		Task_KillInactiveTasksInGroup(s_selfplayer, TGROUP_Attack)
	-- else add new attack tasks
	elseif numAttackTasks < numAttackTasksDesired then
		aitrace("Adding new attack task")
		
		local combatOrderParams =
		{
			combat_type						= COMBAT_Attack,
			rally_location 					= RALLY_NearDefendPoint,
			timeout_ticks_at_rally 			= s_attackTaskTimeoutAtRally,
			timeout_ticks_at_target 		= s_attackTaskTimeoutAtTarget,
			score_threat 					= 5.0,
			score_avoid_clumps_at_no_threat	= 10.0,
			score_distance_to_squad			= 5.0,
			score_distance_to_base			= 5.0,
			score_inertia 					= 1.4
		}
		
		Request_Combat(s_selfplayer, TGROUP_Attack, TPRIORITY_Attack, combatOrderParams)
	end
	
	-- clear unwanted defend tasks each frame
	if numDefendTasks > numDefendTasksDesired then
		aitrace("Killing inactive defend tasks")
		Task_KillInactiveTasksInGroup(s_selfplayer, TGROUP_Defend)
	-- else add new defend tasks
	elseif numDefendTasks < numDefendTasksDesired then
		aitrace("Adding new defend task")
		
		local combatOrderParams =
		{
			combat_type						= COMBAT_Defend,
			rally_location 					= RALLY_NearDefendPoint,
			timeout_ticks_at_rally 			= s_defendTaskTimeoutAtRally,
			timeout_ticks_at_target			= s_defendTaskTimeoutAtTarget,
			score_threat 					= 5.0,
			score_avoid_clumps_at_no_threat	= 10.0,
			score_distance_to_squad			= 5.0,
			score_distance_to_base			= 5.0,
			score_inertia 					= 1.4
		}
		
		Request_Combat(s_selfplayer, TGROUP_Defend, TPRIORITY_Defend, combatOrderParams)
	end
	
	aipoptrace()
end	
